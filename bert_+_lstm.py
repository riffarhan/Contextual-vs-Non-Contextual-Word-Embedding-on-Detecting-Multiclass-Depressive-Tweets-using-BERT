# -*- coding: utf-8 -*-
"""BERT + LSTM

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lL-tU0YqQxc3-fcl7sE95pgzCBgEY9lr

#Section 1

##IMPORT
"""

!pip3 install ftfy

import nltk
nltk.download('stopwords')
import nltk
nltk.download('punkt')
import warnings
warnings.filterwarnings("ignore")
import ftfy
import matplotlib.pyplot as plt
import nltk
import numpy as np
import pandas as pd
import re

from math import exp
from numpy import sign

from sklearn.metrics import  classification_report, confusion_matrix, accuracy_score
from gensim.models import KeyedVectors
from nltk.corpus import stopwords
from nltk import PorterStemmer
!pip install transformers

from keras.models import Model, Sequential
from keras.callbacks import EarlyStopping, ModelCheckpoint
from tensorflow.keras.layers import Conv1D, Dense, Input, LSTM, Embedding, Dropout, Activation, GlobalMaxPooling1D
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences

#!pip install wordcloud
#from wordcloud import WordCloud

"""##CONSTANTS"""

# Reproducibility
np.random.seed(1234)

DEPRES_NROWS = 3200  # number of rows to read from DEPRESSIVE_TWEETS_CSV
RANDOM_NROWS = 12000 # number of rows to read from RANDOM_TWEETS_CSV
MAX_SEQUENCE_LENGTH = 140 # Max tweet size
MAX_NB_WORDS = 20000
EMBEDDING_DIM = 300
TRAIN_SPLIT = 0.6
TEST_SPLIT = 0.2
LEARNING_RATE = 0.1
EPOCHS= 10

"""LOAD DATA"""

from google.colab import drive
drive.mount('/content/drive')

#FILE PATHS
#DEPRESSIVE_TWEETS_CSV = '/content/drive/MyDrive/Colab Notebooks/DATA SOURCE 1/dataset/depressive_tweets_processed.csv'
#RANDOM_TWEETS_CSV = '/content/drive/MyDrive/Colab Notebooks/DATA SOURCE 1/dataset/Sentiment Analysis Dataset.csv'
#EMBEDDING_FILE = '/content/drive/MyDrive/GoogleNews-vectors-negative300.bin'

#word2vec = KeyedVectors.load_word2vec_format(EMBEDDING_FILE, binary=True)

df = pd.read_csv('/content/drive/MyDrive/dataset/archive 2/DatasetBaru.csv')

#depressive_tweets_df = pd.read_csv(DEPRESSIVE_TWEETS_CSV, sep = '|', header = None, usecols = range(0,9), nrows = DEPRES_NROWS)
#random_tweets_df = pd.read_csv(RANDOM_TWEETS_CSV, encoding = "ISO-8859-1", usecols = range(0,4), nrows = RANDOM_NROWS)

#df[df['Sentiment'] == 0]['Sentiment'].count()
#df[df['Sentiment'] == 1]['Sentiment'].count()
#df[df['Sentiment'] == 2]['Sentiment'].count()
df[df['Sentiment'] == 3]['Sentiment'].count()

df

"""#Section 2

##Preprocessing

Preprocessing the tweets in order to:



*   Remove links and images
*   Remove hashtags
*   Remove @ mentions
*Remove emojis
*Remove stop words
*Remove punctuation
*Get rid of stuff like "what's" and making it "what is'
*Stem words so they are all the same tense (e.g. ran -> run)
"""

# Expand Contraction
cList = {
  "ain't": "am not",
  "aren't": "are not",
  "can't": "cannot",
  "can't've": "cannot have",
  "'cause": "because",
  "could've": "could have",
  "couldn't": "could not",
  "couldn't've": "could not have",
  "didn't": "did not",
  "doesn't": "does not",
  "don't": "do not",
  "hadn't": "had not",
  "hadn't've": "had not have",
  "hasn't": "has not",
  "haven't": "have not",
  "he'd": "he would",
  "he'd've": "he would have",
  "he'll": "he will",
  "he'll've": "he will have",
  "he's": "he is",
  "how'd": "how did",
  "how'd'y": "how do you",
  "how'll": "how will",
  "how's": "how is",
  "I'd": "I would",
  "I'd've": "I would have",
  "I'll": "I will",
  "I'll've": "I will have",
  "I'm": "I am",
  "I've": "I have",
  "isn't": "is not",
  "it'd": "it had",
  "it'd've": "it would have",
  "it'll": "it will",
  "it'll've": "it will have",
  "it's": "it is",
  "let's": "let us",
  "ma'am": "madam",
  "mayn't": "may not",
  "might've": "might have",
  "mightn't": "might not",
  "mightn't've": "might not have",
  "must've": "must have",
  "mustn't": "must not",
  "mustn't've": "must not have",
  "needn't": "need not",
  "needn't've": "need not have",
  "o'clock": "of the clock",
  "oughtn't": "ought not",
  "oughtn't've": "ought not have",
  "shan't": "shall not",
  "sha'n't": "shall not",
  "shan't've": "shall not have",
  "she'd": "she would",
  "she'd've": "she would have",
  "she'll": "she will",
  "she'll've": "she will have",
  "she's": "she is",
  "should've": "should have",
  "shouldn't": "should not",
  "shouldn't've": "should not have",
  "so've": "so have",
  "so's": "so is",
  "that'd": "that would",
  "that'd've": "that would have",
  "that's": "that is",
  "there'd": "there had",
  "there'd've": "there would have",
  "there's": "there is",
  "they'd": "they would",
  "they'd've": "they would have",
  "they'll": "they will",
  "they'll've": "they will have",
  "they're": "they are",
  "they've": "they have",
  "to've": "to have",
  "wasn't": "was not",
  "we'd": "we had",
  "we'd've": "we would have",
  "we'll": "we will",
  "we'll've": "we will have",
  "we're": "we are",
  "we've": "we have",
  "weren't": "were not",
  "what'll": "what will",
  "what'll've": "what will have",
  "what're": "what are",
  "what's": "what is",
  "what've": "what have",
  "when's": "when is",
  "when've": "when have",
  "where'd": "where did",
  "where's": "where is",
  "where've": "where have",
  "who'll": "who will",
  "who'll've": "who will have",
  "who's": "who is",
  "who've": "who have",
  "why's": "why is",
  "why've": "why have",
  "will've": "will have",
  "won't": "will not",
  "won't've": "will not have",
  "would've": "would have",
  "wouldn't": "would not",
  "wouldn't've": "would not have",
  "y'all": "you all",
  "y'alls": "you alls",
  "y'all'd": "you all would",
  "y'all'd've": "you all would have",
  "y'all're": "you all are",
  "y'all've": "you all have",
  "you'd": "you had",
  "you'd've": "you would have",
  "you'll": "you you will",
  "you'll've": "you you will have",
  "you're": "you are",
  "you've": "you have"
}

c_re = re.compile('(%s)' % '|'.join(cList.keys()))

def expandContractions(text, c_re=c_re):
    def replace(match):
        return cList[match.group(0)]
    return c_re.sub(replace, text)

def clean_tweets(tweets, sentiments):
    cleaned_tweets = []
    cleaned_sentiments = []
    for i, tweet in enumerate(tweets):
        tweet = str(tweet)
        # if url links then dont append to avoid news articles
        # also check tweet length, save those > 10 (length of word "depression")
        if re.match("(\w+:\/\/\S+)", tweet) == None and len(tweet) > 10:
            #remove hashtag, @mention, emoji and image URLs
            tweet = ' '.join(re.sub("(@[A-Za-z0-9]+)|(\#[A-Za-z0-9]+)|(<Emoji:.>)|(pic\.twitter\.com\/.)", " ", tweet).split())

            #fix weirdly encoded texts
            tweet = ftfy.fix_text(tweet)
            tweet = tweet.lower() #case folding
            #expand contraction
            tweet = expandContractions(tweet)

            #remove punctuation
            tweet = ' '.join(re.sub("([^0-9A-Za-z \t])", " ", tweet).split())

            #stop words
            #stop_words = set(stopwords.words('english'))
            #word_tokens = nltk.word_tokenize(tweet)
            #filtered_sentence = [w for w in word_tokens if not w in stop_words]
            #tweet = ' '.join(filtered_sentence)

            #stemming words
            #tweet = PorterStemmer().stem(tweet)

            cleaned_tweets.append(tweet)
            cleaned_sentiments.append(sentiments[i])

    return cleaned_tweets, cleaned_sentiments

# merubah type data dalam record menjadi format string
df.SentimentText=df.SentimentText.astype(str)
#@title
# merubah type data dalam record sentimentText menjadi format string
#depressive_tweets_df=depressive_tweets_df.astype(str)

#depressive_tweets_arr = [x for x in depressive_tweets_df[5]]
random_tweets_arr = [x for x in df['SentimentText']]
#X_d = clean_tweets(depressive_tweets_arr)
X_r, y_r = clean_tweets(random_tweets_arr, df['Sentiment'])

"""##Splitting Data"""

# defining feature matrix(X) and response vector(y)
X = X_r
#X = [np.array(d) for d in X]
y = y_r
y = np.array(y)
#X = np.array(X)

# splitting X and y into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
                                                    random_state=1)

#tokenizer = Tokenizer(num_words=MAX_NB_WORDS)
#tokenizer.fit_on_texts(X_r)

from transformers import BertTokenizer, TFBertModel
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
bert_model = TFBertModel.from_pretrained("bert-base-uncased")

X_train

X_test

from tensorflow.keras import layers
from tensorflow.keras import regularizers

max_seq = 200
lr = 2e-5
epochs = 20
batch_size = 16

def batch_encode(X, tokenizer):
  return tokenizer.batch_encode_plus(X,
                                     max_length=max_seq, # set the length of the sequences
                                     add_special_tokens=True, # add [CLS] and [SEP] tokens
                                     return_attention_mask=True,
                                     return_token_type_ids=False, # not needed for this type of ML task
                                     padding='max_length', # add 0 pad tokens to the sequences less than max_length
                                     return_tensors='tf')

X_train = (batch_encode(X_train, tokenizer)).values()
X_test = (batch_encode(X_test, tokenizer)).values()

#nb_words = min(MAX_NB_WORDS, len(word_index))

#embedding_matrix = np.zeros((nb_words, EMBEDDING_DIM))

#for (word, idx) in word_index.items():
#    if word in word2vec.vocab and idx < MAX_NB_WORDS:
#        embedding_matrix[idx] = word2vec.word_vec(word)

#nb_words

len(y_r)

from sklearn.preprocessing import OneHotEncoder
y = pd.get_dummies(y_train)
y_train = np.array(y)

from sklearn.preprocessing import OneHotEncoder
y = pd.get_dummies(y_test)
y_test = np.array(y)

X_train

y_train

#tes = model([X_train['input_ids'], X_train['attention_mask']])

"""#Model"""

import tensorflow as tf
import keras

!pip install -q keras-rectified-adam
from keras_radam import RAdam

input_word_ids = tf.keras.layers.Input(shape=(max_seq,), name='input_word_ids', dtype='int32')
input_mask_ids = tf.keras.layers.Input(shape=(max_seq,), name='input_mask_ids', dtype='int32')
bert = bert_model([input_word_ids, input_mask_ids])
sequence_output = bert['last_hidden_state']

input_word_ids = tf.keras.layers.Input(shape=(max_seq,), name='input_word_ids', dtype='int32')
input_mask_ids = tf.keras.layers.Input(shape=(max_seq,), name='input_mask_ids', dtype='int32')
bert = bert_model([input_word_ids, input_mask_ids])
sequence_output = bert['last_hidden_state']
dropout = tf.keras.layers.Dropout(0.2)(sequence_output)
lstm = tf.keras.layers.LSTM(768, return_sequences=True)(dropout)
dropout = tf.keras.layers.Dropout(0.2)(lstm)
pooling = tf.keras.layers.GlobalAveragePooling1D()(dropout)
hidden = tf.keras.layers.Dense(150, activation='relu')(pooling)
outputs = tf.keras.layers.Dense(4, activation='softmax')(hidden)
model = tf.keras.models.Model(inputs = [input_word_ids,input_mask_ids], outputs = outputs)
model.compile(
  optimizer=RAdam(learning_rate=lr),
  loss='categorical_crossentropy',
  metrics=['accuracy']
)
# early_stop = EarlyStopping(monitor='val_accuracy', mode ='max', verbose=1, patience=5,restore_best_weights=True) #Stop training when a monitored metric has stopped improving.

# hist = model.fit(X_train, y_train,
#         validation_data=(X_test, y_test),
#         epochs=20, batch_size=32,
#         callbacks=early_stop)

model.compile(
  optimizer=RAdam(learning_rate=lr),
  loss='categorical_crossentropy',
  metrics=['accuracy']
)

print(tf.keras.utils.plot_model)
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import confusion_matrix
import pandas as pd
from sklearn.metrics import classification_report

def model_evaluate():
  y_pred = model.predict(X_test)
  plt.figure(3)
  cf_matrix = ConfusionMatrixDisplay.from_predictions(y_test.argmax(axis=1), y_pred.argmax(axis=1), cmap='Blues')
  plt.title('Confusion Matrix')
  plt.savefig("/content/drive/MyDrive/CSV Skripsi/BERT/BERT Skenario-16-DropoutLayer-{}.png".format(i))
  plt.show()
def model_confusion():
  from sklearn.metrics import ConfusionMatrixDisplay
  from sklearn.metrics import confusion_matrix
  import pandas as pd
  from sklearn.metrics import classification_report
  y_pred = model.predict(X_test)
  report_dict = classification_report(y_test.argmax(axis=1), y_pred.argmax(axis=1), digits=3, output_dict = True)
  report = pd.DataFrame(report_dict)
  report.to_csv("/content/drive/MyDrive/CSV Skripsi/BERT/BERT Skenario-16-DropoutLayer-{}.csv".format(i), index=False)
  print(report)

model.summary()

early_stop = EarlyStopping(monitor='val_accuracy', mode = 'max', verbose = 1, patience=3, restore_best_weights= True) #Stop training when a monitored metric has stopped improving.
for i in range(5):
  hist = model.fit(X_train, y_train, \
                   validation_data=(X_test, y_test), \
                   epochs=20, batch_size=16, shuffle=True,
                   callbacks = early_stop)
  model_evaluate()
  model_confusion()
 # model.save(checkpoint_path, 'saved_model')
  print('--------\n\n')

checkpoint_path = "/content/drive/MyDrive/Checkpoint Farhan/"
callbacks_list = [ModelCheckpoint(checkpoint_path+"BERT New",
                                  monitor='val_accuracy',
                                  save_best_only=True,
                                  mode='max',
                                  verbose=1)]

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

checkpoint_path = "/content/drive/MyDrive/Checkpoint Farhan/"
model.load_weights('/content/drive/MyDrive/Checkpoint Farhan/BERT + Regularizer')

#model = Sequential()
# Embedded layer
#model.add(Embedding(len(embedding_matrix), EMBEDDING_DIM, weights=[embedding_matrix],
#                            input_length=MAX_SEQUENCE_LENGTH, trainable=False))
# Convolutional Layer
#model.add(Conv1D(filters=32, kernel_size=3, padding='same', activation='relu'))
#model.add(MaxPooling1D(pool_size=2))
#model.add(Dropout(0.2))
# LSTM Layer
#model.add(LSTM(300))
#model.add(Dropout(0.2))
#model.add(Dense(3, activation='softmax'))

print(type(y))

print(tf.keras.utils.plot_model)

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import confusion_matrix
import pandas as pd
from sklearn.metrics import classification_report
y_pred = model.predict(X_test)
report_dict = classification_report(y_test.argmax(axis=1), y_pred.argmax(axis=1), digits=3, output_dict = True)
pd.DataFrame(report_dict)

plt.figure(3)
cf_matrix = ConfusionMatrixDisplay.from_predictions(y_test.argmax(axis=1), y_pred.argmax(axis=1), cmap='Blues')
plt.title('Confusion Matrix')
plt.savefig(checkpoint_path+'BERT New -LSTM Confusion Matrix.png',dpi=300,bbox_inches='tight')
plt.show()